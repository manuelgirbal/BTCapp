library(tidyverse)
library(lubridate)
library(plotly)
library(geckor)
library(httr)
library(jsonlite)
# Define the API endpoint URL
url <- "https://api.coingecko.com/api/v3/simple/price?ids=BTC&vs_currencies=USD"
# Send the HTTP request to the API endpoint
response <- GET(url)
# Convert the response to a JSON object
json_data <- fromJSON(content(response, "text"))
View(response)
# Define the API endpoint URL
url <- "https://api.coingecko.com/api/v3/coins/BTC/history?date=01-04-2023"
# Send the HTTP request to the API endpoint
response <- GET(url)
# Convert the response to a JSON object
json_data <- fromJSON(content(response, "text"))
View(json_data)
# Define the API endpoint URL
url <- "https://api.coingecko.com/api/v3/coins/bitcoin/history?date=01-04-2023"
# Send the HTTP request to the API endpoint
response <- GET(url)
# Convert the response to a JSON object
json_data <- fromJSON(content(response, "text"))
View(json_data)
# Define the API endpoint URL
url <- "https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=USD&days=max&interval=daily"
# Send the HTTP request to the API endpoint
response <- GET(url)
# Convert the response to a JSON object
json_data <- fromJSON(content(response, "text"))
# Extract the price data from the JSON object
prices <- json_data$prices
View(prices)
View(prices)
# Convert the price data to a data frame
df <- data.frame(timestamp = as.POSIXct(prices[,1]/1000, origin = "1970-01-01"),
price = prices[,2])
# Print the data frame
print(df)
View(df)
View(df)
class(prices)
as_tibble(prices)
library(tidyverse)
library(lubridate)
library(plotly)
as_tibble(prices)
# Convert the price data to a data frame
btcprice <- as_tibble(timestamp = as.POSIXct(prices[,1]/1000, origin = "1970-01-01"),
price = prices[,2])
# Convert the price data to a data frame
btcprice <- as_tibble(data.frame(timestamp = as.POSIXct(prices[,1]/1000, origin = "1970-01-01"),
price = prices[,2])
)
btcprice
ls()
# Clean environment
rm(list = setdiff(ls(), "btcprice"))
# Convert the price data to a data frame
btcprice <- as_tibble(data.frame(date = as.POSIXct(prices[,1]/1000, origin = "1970-01-01"),
price = prices[,2])
)
# Define the API endpoint URL
url <- "https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=USD&days=max&interval=daily"
# Send the HTTP request to the API endpoint
response <- GET(url)
# Convert the response to a JSON object
json_data <- fromJSON(content(response, "text"))
# Extract the price data from the JSON object
prices <- json_data$prices
# Convert the price data to a data frame
btcprice <- as_tibble(data.frame(date = as.POSIXct(prices[,1]/1000, origin = "1970-01-01"),
price = prices[,2])
)
#Computing daily variation:
data_variation <- btcprice %>%
arrange(date) %>%
mutate(BTC_VAR = round((price/lag(price)-1)*100,1))
View(data_variation)
data_variation[is.na(data_variation)]<-0
View(data_variation)
View(btcprice)
View(data_variation)
# Clean environment
rm(list = setdiff(ls(), "btcprice"))
#Computing daily variation:
btcprice <- btcprice %>%
arrange(date) %>%
mutate(var = round((price/lag(price)-1)*100,1))
btcprice[is.na(btcprice)]<-0
#Plot 1:
ggplot(btcprice, aes(date)) +
geom_line(aes(y = btcprice, colour = "btcprice")) +
ylab("USD Value") +
xlab("Date") +
scale_x_date(date_breaks = "1 year", date_labels = "%Y")
#Plot 1:
ggplot(btcprice, aes(date)) +
geom_line(aes(y = price, colour = "price")) +
ylab("USD Value") +
xlab("Date") +
scale_x_date(date_breaks = "1 year", date_labels = "%Y")
# Define the API endpoint URL
url <- "https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=USD&days=max&interval=daily"
# Send the HTTP request to the API endpoint
response <- GET(url)
# Convert the response to a JSON object
json_data <- fromJSON(content(response, "text"))
# Extract the price data from the JSON object
prices <- json_data$prices
# Convert the price data to a data frame
btcprice <- as_tibble(data.frame(date = as.Date(prices[,1]/1000, origin = "1970-01-01"),
price = prices[,2])
)
btcprice
# Clean environment
rm(list = setdiff(ls(), "btcprice"))
#Computing daily variation:
btcprice <- btcprice %>%
arrange(date) %>%
mutate(var = round((price/lag(price)-1)*100,1))
btcprice[is.na(btcprice)]<-0
#Plot 1:
ggplot(btcprice, aes(date)) +
geom_line(aes(y = price, colour = "price")) +
ylab("USD Value") +
xlab("Date") +
scale_x_date(date_breaks = "1 year", date_labels = "%Y")
btcprice
ggplot(btcprice, aes(date, price)) +
geom_line() +
ylab("USD Value") +
xlab("Date")
#Plot 1:
ggplot(btcprice, aes(date, price)) +
geom_line() +
ylab("USD Value") +
xlab("Date") +
scale_x_date(date_breaks = "1 year", date_labels = "%Y")
#Plot 1:
ggplot(btcprice, aes(date, price)) +
geom_line() +
#ylab("USD Value") +
#xlab("Date") +
scale_x_date(date_breaks = "1 year", date_labels = "%Y")
View(btcprice)
# Define the API endpoint URL
url <- "https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=USD&days=max&interval=daily"
# Send the HTTP request to the API endpoint
response <- GET(url)
# Convert the response to a JSON object
json_data <- fromJSON(content(response, "text"))
# Extract the price data from the JSON object
prices <- json_data$prices
# Convert the price data to a data frame
btcprice <- as_tibble(data.frame(date = as.Date(prices[,1]/1000, origin = "1970-01-01"),
price = prices[,2])
)
btcprices
View(btcprice)
View(prices)
View(btcprice)
# Convert the price data to a data frame
btcprice <- as_tibble(data.frame(date = as.POSIXct(prices[,1]/1000, origin = "1970-01-01"),
price = prices[,2])
)
View(btcprice)
# Convert the price data to a data frame
btcprice <- as_tibble(data.frame(date = as.Date(
as.POSIXct(prices[,1]/1000, origin = "1970-01-01")
),
price = prices[,2])
)
btcprice
View(btcprice)
# Clean environment
rm(list = setdiff(ls(), "btcprice"))
#Computing daily variation:
btcprice <- btcprice %>%
arrange(date) %>%
mutate(var = round((price/lag(price)-1)*100,1))
btcprice[is.na(btcprice)]<-0
#Plot 1:
ggplot(btcprice, aes(date, price)) +
geom_line() +
ylab("USD Value") +
xlab("Date") +
scale_x_date(date_breaks = "1 year", date_labels = "%Y")
View(btcprice)
btcprice[,"date" == "2023-04-16"]
btcprice[,"date" == 2023-04-16]
btcprice["date" == 2023-04-16,]
btcprice[btcprice$date == 2023-04-16,]
btcprice[btcprice$date %in% 2023-04-16,]
btcprice[btcprice$date %in% 2023-04-16, ]
btcprice[btcprice$date == '2023-04-16', ]
#Plot 1:
ggplotly(ggplot(btcprice, aes(date, price)) +
geom_line() +
ylab("USD Value") +
xlab("Date") +
scale_x_date(date_breaks = "1 year", date_labels = "%Y")
)
# Define the API endpoint URL
url <- "https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=USD&days=max&interval=daily"
# Send the HTTP request to the API endpoint
response <- GET(url)
# Convert the response to a JSON object
json_data <- fromJSON(content(response, "text"))
# Extract the price data from the JSON object
prices <- json_data$prices
# Convert the price data to a data frame
btcprice <- as_tibble(data.frame(date = as.Date(
as.POSIXct(prices[,1]/1000, origin = "1970-01-01")
),
price = round(prices[,2],1))
)
# Clean environment
rm(list = setdiff(ls(), "btcprice"))
#Computing daily variation:
btcprice <- btcprice %>%
arrange(date) %>%
mutate(var = round((price/lag(price)-1)*100,1))
btcprice[is.na(btcprice)]<-0
#Plot 1:
ggplotly(ggplot(btcprice, aes(date, price)) +
geom_line() +
ylab("USD Value") +
xlab("Date") +
scale_x_date(date_breaks = "1 year", date_labels = "%Y")
)
shiny::runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
btcprice %>%
mutate(year = year(date)) %>%
group_by(year) %>%
summarise(avg_price = mean(price, na.rm = T)) %>%
arrange(year) %>%
mutate(year_var = round((avg_price/lag(avg_price)-1)*100,1)) %>%
replace(is.na(.), 0)
View(year_var)
#Computing yearly variation (of avg price per year):
year_var <- btcprice %>%
mutate(year = year(date)) %>%
group_by(year) %>%
summarise(avg_price = mean(price, na.rm = T)) %>%
arrange(year) %>%
mutate(year_var = round((avg_price/lag(avg_price)-1)*100,1)) %>%
replace(is.na(.), 0)
View(year_var)
View(year_var)
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
shiny::runApp('BTCapp')
runApp('BTCapp')
?formatStyle
year_var
runApp('BTCapp')
runApp('BTCapp')
?styleInterval
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
yearly
?formatCurrency
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
?formatStyle
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
View(yearly)
library(tidyverse)
library(httr)
library(jsonlite)
library(lubridate)
library(plotly)
# Define the API endpoint URL
url <- "https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=USD&days=max&interval=daily"
# Send the HTTP request to the API endpoint
response <- GET(url)
# Convert the response to a JSON object
json_data <- fromJSON(content(response, "text"))
# Extract the price data from the JSON object
prices <- json_data$prices
# Convert the price data to a data frame
btcprice <- as_tibble(data.frame(date = as.Date(
as.POSIXct(prices[,1]/1000, origin = "1970-01-01")
),
price = round(prices[,2],1))
)
# Clean environment
rm(list = setdiff(ls(), "btcprice"))
#Computing yearly variation (of avg price per year):
yearly <- btcprice %>%
mutate(year = year(date)) %>%
group_by(year) %>%
summarise(avg_price = round(mean(price, na.rm = T),2)) %>%
arrange(year) %>%
mutate(year_var = round((avg_price/lag(avg_price)-1),1)) %>%
replace(is.na(.), 0)
View(yearly)
runApp('BTCapp')
library(tidyverse)
library(httr)
library(jsonlite)
library(lubridate)
library(plotly)
# Define the API endpoint URL
url <- "https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=USD&days=max&interval=daily"
# Send the HTTP request to the API endpoint
response <- GET(url)
# Convert the response to a JSON object
json_data <- fromJSON(content(response, "text"))
# Extract the price data from the JSON object
prices <- json_data$prices
# Convert the price data to a data frame
btcprice <- as_tibble(data.frame(date = as.Date(
as.POSIXct(prices[,1]/1000, origin = "1970-01-01")
),
price = round(prices[,2],1))
)
# Clean environment
rm(list = setdiff(ls(), "btcprice"))
#Computing yearly variation (of avg price per year):
yearly <- btcprice %>%
mutate(year = year(date)) %>%
group_by(year) %>%
summarise(avg_price = round(mean(price, na.rm = T),2)) %>%
arrange(year) %>%
mutate(year_var = round((avg_price/lag(avg_price)-1)*100,1)) %>%
replace(is.na(.), 0)
View(yearly)
View(yearly)
library(tidyverse)
library(httr)
library(jsonlite)
library(lubridate)
library(plotly)
# Define the API endpoint URL
url <- "https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=USD&days=max&interval=daily"
# Send the HTTP request to the API endpoint
response <- GET(url)
# Convert the response to a JSON object
json_data <- fromJSON(content(response, "text"))
# Extract the price data from the JSON object
prices <- json_data$prices
# Convert the price data to a data frame
btcprice <- as_tibble(data.frame(date = as.Date(
as.POSIXct(prices[,1]/1000, origin = "1970-01-01")
),
price = round(prices[,2],1))
)
# Clean environment
rm(list = setdiff(ls(), "btcprice"))
#Computing yearly variation (of avg price per year):
yearly <- btcprice %>%
mutate(year = year(date)) %>%
group_by(year) %>%
summarise(avg_price = round(mean(price, na.rm = T),2)) %>%
arrange(year) %>%
mutate(year_var = round((avg_price/lag(avg_price)-1),1)) %>%
replace(is.na(.), 0)
View(yearly)
library(tidyverse)
library(httr)
library(jsonlite)
library(lubridate)
library(plotly)
# Define the API endpoint URL
url <- "https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=USD&days=max&interval=daily"
# Send the HTTP request to the API endpoint
response <- GET(url)
# Convert the response to a JSON object
json_data <- fromJSON(content(response, "text"))
# Extract the price data from the JSON object
prices <- json_data$prices
# Convert the price data to a data frame
btcprice <- as_tibble(data.frame(date = as.Date(
as.POSIXct(prices[,1]/1000, origin = "1970-01-01")
),
price = round(prices[,2],1))
)
# Clean environment
rm(list = setdiff(ls(), "btcprice"))
#Computing yearly variation (of avg price per year):
yearly <- btcprice %>%
mutate(year = year(date)) %>%
group_by(year) %>%
summarise(avg_price = round(mean(price, na.rm = T),2)) %>%
arrange(year) %>%
mutate(year_var = round((avg_price/lag(avg_price)-1),2)) %>%
replace(is.na(.), 0)
View(yearly)
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
shiny::runApp('BTCapp')
shiny::runApp('BTCapp')
runApp('BTCapp')
