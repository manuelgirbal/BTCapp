df %>%
slice(-1) %>%
transmute(
date = as_date(date),
txs = as.numeric(value)
)
df %>%
slice(-1) %>%
gsub('"', '', date)
df
# Creating the data frame:
df <- tibble(a = txs_list) %>%
unnest(a)
# Separating columns by whitespace or gap:
df <- df %>%
slice(-1) %>%
separate(a, into = c("filename", "date", "time", "value"), sep = "\\s+")
df
df %>%
transmute(
date = as_date(date),
txs = as.numeric(value)
)
df %>%
transmute(
date = dmy(date),
txs = as.numeric(value)
)
# Transforming some data:
df <- df %>%
transmute(
date = dmy(date),
txs = as.numeric(value)
)
df
# Grouping by month:
df_m <- df %>%
group_by(date) %>%
summarise(txs = sum(txs))
df_m
df_m <- df %>%
group_by(month = floor_date(date, "month")) %>%
summarize(txs = sum(txs))
df_m
shiny::runApp('BTCapp')
runApp('BTCapp')
# Reading "Blockchair Database Dumps" historic bitcoin transactions table:
blockchair <- read_html("https://gz.blockchair.com/bitcoin/transactions/")
# Selecting xpath of the transactions table:
txs_list <- blockchair %>%
html_element(xpath = "/html/body/pre") %>%
html_text()%>%
strsplit("\n")
# Creating the data frame:
df <- tibble(a = txs_list) %>%
unnest(a)
# Separating columns by whitespace or gap:
df <- df %>%
slice(-1) %>%
separate(a, into = c("filename", "date", "time", "value"), sep = "\\s+")
# Transforming some data:
df <- df %>%
transmute(
date = dmy(date),
txs = as.numeric(value)
)
# Grouping by month:
df_m <- df %>%
group_by(date) %>%
summarise(txs = sum(txs))
df_m <- df %>%
group_by(month = floor_date(date, "month")) %>%
summarize(txs = sum(txs))
View(df_m)
runApp('BTCapp')
# Reading "Blockchair Database Dumps" historic bitcoin transactions table:
blockchair <- read_html("https://gz.blockchair.com/bitcoin/transactions/")
# Selecting xpath of the transactions table:
txs_list <- blockchair %>%
html_element(xpath = "/html/body/pre") %>%
html_text()%>%
strsplit("\n")
# Creating the data frame:
df <- tibble(a = txs_list) %>%
unnest(a)
# Separating columns by whitespace or gap:
df <- df %>%
slice(-1) %>%
separate(a, into = c("filename", "date", "time", "value"), sep = "\\s+")
# Transforming some data:
df <- df %>%
transmute(
date = dmy(date),
txs = as.numeric(value)
)
# Grouping by month:
df_m <- df %>%
group_by(date) %>%
summarise(txs = sum(txs))
df_m <- df %>%
group_by(month = floor_date(date, "month")) %>%
summarize(txs = sum(txs))
df_m
View(df_m)
# Grouping by month:
df_m <- df %>%
group_by(date) %>%
summarise(txs = sum(txs))
df_m
df %>%
month = format_ISO8601(date, precision = "ym")
df %>%
mutate(month = format_ISO8601(date, precision = "ym"))
df %>%
mutate(month = format_ISO8601(date, precision = "ym")) %>%
group_by(month) %>%
summarize(txs = sum(txs))
df_m <- df %>%
mutate(month = format_ISO8601(date, precision = "ym")) %>%
group_by(month) %>%
summarize(txs = sum(txs))
View(df_m)
df_m <- df %>%
mutate(month = format_ISO8601(date, precision = "ym"))
View(df_m)
df %>%
mutate(month = format_ISO8601(date, precision = "ym")) %>%
group_by(month) %>%
summarize(txs = sum(txs))
View(df)
View(df_m)
# Creating the data frame:
df <- tibble(a = txs_list) %>%
unnest(a)
View(df)
library(tidyverse)
library(rvest)
library(stringr)
library(lubridate)
# Reading "Blockchair Database Dumps" historic bitcoin transactions table:
blockchair <- read_html("https://gz.blockchair.com/bitcoin/transactions/")
# Selecting xpath of the transactions table:
txs_list <- blockchair %>%
html_element(xpath = "/html/body/pre") %>%
html_text()%>%
strsplit("\n")
# Creating the data frame:
df <- tibble(a = txs_list) %>%
unnest(a)
# Separating columns by whitespace or gap:
df <- df %>%
slice(-1) %>%
separate(a, into = c("filename", "date", "time", "value"), sep = "\\s+")
# Transforming some data:
df <- df %>%
mutate(value = str_replace_all(value, 'M', '000000')) %>%
mutate(value = str_replace_all(value, 'K', '000')) %>%
transmute(
date = dmy(date),
txs = as.numeric(value)
)
View(df)
options(scipen=999)
# Creating the data frame:
df <- tibble(a = txs_list) %>%
unnest(a)
# Separating columns by whitespace or gap:
df <- df %>%
slice(-1) %>%
separate(a, into = c("filename", "date", "time", "value"), sep = "\\s+")
# Transforming some data:
df <- df %>%
mutate(value = str_replace_all(value, 'M', '000000')) %>%
mutate(value = str_replace_all(value, 'K', '000')) %>%
transmute(
date = dmy(date),
txs = as.numeric(value)
)
View(df)
# Grouping by month:
df_m <- df %>%
group_by(date) %>%
summarise(txs = sum(txs))
# Grouping by month:
df_m <- df %>%
mutate(month = format_ISO8601(date, precision = "ym")) %>%
group_by(month) %>%
summarize(txs = sum(txs))
View(df_m)
df_m %>% summarise(n = sum(txs))
blockchair_bitcoin_transactions_20090103.tsv <- read.delim("C:/Users/manue/Downloads/blockchair_bitcoin_transactions_20090103.tsv.gz")
View(blockchair_bitcoin_transactions_20090103.tsv)
blockchair_bitcoin_transactions_20100806.tsv <- read.delim("C:/Users/manue/Downloads/blockchair_bitcoin_transactions_20100806.tsv.gz")
View(blockchair_bitcoin_transactions_20100806.tsv)
blockchair_bitcoin_transactions_20090204.tsv <- read.delim("C:/Users/manue/Downloads/blockchair_bitcoin_transactions_20090204.tsv.gz")
View(blockchair_bitcoin_transactions_20090204.tsv)
`blockchair_bitcoin_transactions_20090103.(1).tsv` <- read.delim("C:/Users/manue/Downloads/blockchair_bitcoin_transactions_20090103 (1).tsv.gz")
View(`blockchair_bitcoin_transactions_20090103.(1).tsv`)
library(DBI)
library(RSQLite)
# Define the URL
url <- "https://gz.blockchair.com/bitcoin/transactions/"
# Define the URL
url <- "https://gz.blockchair.com/bitcoin/transactions/"
# Read the HTML content and extract the table data
webpage <- read_html(url)
table_data <- html_text(html_nodes(webpage, xpath = "/html/body/pre"))
# Split the table data into rows
rows <- strsplit(table_data, "\n")
View(rows)
# Extract the required information (date and row count) from each row
data <- lapply(rows, function(row) {
columns <- strsplit(row, "\\s+")[[1]]
if (length(columns) >= 3) {
date <- as.Date(columns[2], format = "%d-%b-%Y", tz = "GMT")
row_count <- as.numeric(columns[3])
return(list(Date = date, Row_Count = row_count))
} else {
return(NULL)
}
})
View(data)
# Remove NULL entries from the data list
data <- data[!sapply(data, is.null)]
# Combine the data into a data frame
data_frame <- do.call(rbind, data)
# Connect to your SQLite database (replace 'your_database_file.db' with the name of your SQLite database file)
con <- dbConnect(RSQLite::SQLite(), dbname = "your_database_file.db")
# Store the data in your SQLite database (replace 'your_database_table_name' with the actual table name in your database)
dbWriteTable(con, name = "your_database_table_name", value = data_frame, overwrite = TRUE)
# Close the database connection
dbDisconnect(con)
library(httr)
library(jsonlite)
# Set the API call URL and parameters
url <- 'https://api-v2.flipsidecrypto.xyz/json-rpc'
headers <- c(
'x-api-key' = '3da6cd9b-ca9e-4280-8a8d-9d2bec2bdd52',
'Content-Type' = 'application/json'
)
payload <- list(
jsonrpc = '2.0',
method = 'createQueryRun',
params = list(
list(
resultTTLHours = 1,
maxAgeMinutes = 0,
sql = "select date(date_trunc('Month', block_timestamp)) as month, count(*) as txs from bitcoin.core.fact_transactions group by 1 order by 1 desc",
tags = list(
source = 'postman-demo',
env = 'test'
),
dataSource = 'snowflake-default',
dataProvider = 'flipside'
)
),
id = 1
)
# Make the API call and read the data
response <- POST(url, body = toJSON(payload), encode = "json", httr::add_headers(.headers=headers))
data <- content(response, as = "text")
# Parse the data into a data frame
data_df <- fromJSON(data)
data_df
install.packages("shroomDK")
library(shroomDK)
api_key = readLines("api_key.txt") # always gitignore your API keys!
query <- {
"
select date(date_trunc('Month', block_timestamp)) as month,
count(*) as txs
from bitcoin.core.fact_transactions
group by 1
order by 1 desc
"
}
pull_data <- auto_paginate_query(
query = query,
api_key = api_key
)
View(pull_data)
library(tidyverse)
library(lubridate)
View(pull_data)
# Constructing the table:
df_txs <- pull_data %>%
mutate(date = dmy(month))
as_tibble(pull_data)
pull_data %>%
mutate(date = ymd_hms(month))
# Constructing the table:
df_txs <- pull_data %>%
transmute(date = ymd_hms(month),
txs)
df_txs
# Constructing the table:
df_txs <- as_tibble(
pull_data %>%
transmute(date = ymd_hms(month),
txs)
)
df_txs
# Constructing the table:
df_txs <- as_tibble(
pull_data %>%
transmute(date = ymd(month),
txs)
)
# Constructing the table:
df_txs <- as_tibble(
pull_data %>%
transmute(date = ymd_hms(month),
txs)
)
df_txs
# Constructing the table:
df_txs <- as_tibble(
pull_data %>%
transmute(date = as_date(ymd_hms(month)),
txs)
)
df_txs
View(df_txs)
df_txs %>% summarise(n = sum(txs))
shiny::runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
shiny::runApp('BTCapp')
runApp('BTCapp')
shiny::runApp('BTCapp')
runApp('BTCapp')
shiny::runApp('BTCapp')
runApp('BTCapp')
runApp('BTCapp')
shiny::runApp('BTCapp')
?bindCache
runApp('BTCapp')
runApp('BTCapp')
library(rnaturalearth)
?rnaturalearth
?sf
library(tidyverse)
library(readr)
library(countrycode)
library(rnaturalearth)
## Reading the csv created by file "bitnodes.r"
nodes_df <- read.csv("R/nodes.csv")
nodes_df <- read.csv("BTCapp/R/nodes.csv")
library(tidyverse)
library(readr)
library(countrycode)
library(rnaturalearth)
country_name <- countrycode(sourcevar = nodes_df$country_code,
origin = 'ecb',
destination = 'country.name')
nodes_df <- cbind(nodes_df, country_name)
# Creating a nodes count and joining with world dataframe
node_counts <- nodes_df %>%
filter(!is.na(country_name)) %>%
group_by(country_name, country_code) %>%
summarise(nodes = n())
# Adding polygon data to dataset
world_nodes <- ne_countries(scale = "medium", returnclass = "sf") %>%
mutate(country_code = iso_a2) %>%
left_join(node_counts, by = "country_code")
# Creating and plotting map
nodes_map <- world_nodes %>%
ggplot() +
geom_sf(aes(fill = nodes)) +
scale_fill_gradient2(low = "white", mid = "lightgrey", high = "darkorange", na.value = "white") +
theme(plot.background = element_rect(fill = "#A6A6A6"),
panel.background = element_rect(fill = "#A6A6A6"),
panel.grid.major = element_line(colour = "#7A7A7A")
)
nodes_map
world_nodes <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(admin != "Antartica") %>%
mutate(country_code = iso_a2) %>%
left_join(node_counts, by = "country_code")
nodes_map <- world_nodes %>%
ggplot() +
geom_sf(aes(fill = nodes)) +
scale_fill_gradient2(low = "white", mid = "lightgrey", high = "darkorange", na.value = "white") +
theme(plot.background = element_rect(fill = "#A6A6A6"),
panel.background = element_rect(fill = "#A6A6A6"),
panel.grid.major = element_line(colour = "#7A7A7A")
)
nodes_map
country_name <- countrycode(sourcevar = nodes_df$country_code,
origin = 'ecb',
destination = 'country.name')
nodes_df <- cbind(nodes_df, country_name)
# Creating a nodes count and joining with world dataframe
node_counts <- nodes_df %>%
filter(!is.na(country_name)) %>%
group_by(country_name, country_code) %>%
summarise(nodes = n())
nodes_df <- cbind(nodes_df, country_name)
# Creating a nodes count and joining with world dataframe
node_counts <- nodes_df %>%
filter(!is.na(country_name)) %>%
group_by(country_name, country_code) %>%
summarise(nodes = n())
ne_countries(scale = "medium", returnclass = "sf")
as_tibble(ne_countries(scale = "medium", returnclass = "sf"))
test = ne_countries(scale = "medium", returnclass = "sf")
View(test)
test$admin
ne_countries(scale = "medium", returnclass = "sf") %>%
filter(admin != "Antartica")
ne_countries(scale = "medium", returnclass = "sf") %>%
filter(admin != "Antartica") %>%
mutate(country_code = iso_a2)
ne_countries(scale = "medium", returnclass = "sf") %>%
filter(admin != "Antartica") %>%
mutate(country_code = iso_a2) %>%
left_join(node_counts, by = "country_code")
world_nodes <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(admin != "Antartica") %>%
mutate(country_code = iso_a2) %>%
left_join(node_counts, by = "country_code")
nodes_map <- world_nodes %>%
ggplot() +
geom_sf(aes(fill = nodes)) +
scale_fill_gradient2(low = "white", mid = "lightgrey", high = "darkorange", na.value = "white") +
theme(plot.background = element_rect(fill = "#A6A6A6"),
panel.background = element_rect(fill = "#A6A6A6"),
panel.grid.major = element_line(colour = "#7A7A7A")
)
nodes_map
# Get country name
country_name <- countrycode(sourcevar = nodes_df$country_code,
origin = 'ecb',
destination = 'country.name')
nodes_df <- cbind(nodes_df, country_name)
shiny::runApp('BTCapp')
runApp('BTCapp')
install.packages("rnaturalearthdata")
runApp('BTCapp')
shiny::runApp('BTCapp')
library(tidyverse)
library(httr)
library(jsonlite)
library(lubridate)
## Getting price data from [CoinGecko](https://www.coingecko.com/)
# Define the API endpoint URL
url <- "https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=USD&days=max&interval=daily"
# Send the HTTP request to the API endpoint
response <- GET(url)
# Convert the response to a JSON object
json_data <- fromJSON(content(response, "text"))
# Extract the price data from the JSON object
prices <- json_data$prices
# Convert the price data to a data frame
btcprice <- as_tibble(data.frame(date = as.Date(
as.POSIXct(prices[,1]/1000, origin = "1970-01-01")
),
price = round(prices[,2],1))
)
#Computing yearly variation (of avg price per year):
yearly <- btcprice %>%
mutate(year = year(date)) %>%
group_by(year) %>%
summarise(avg_price = round(mean(price, na.rm = T),2)) %>%
arrange(year) %>%
mutate(year_var = round((avg_price/lag(avg_price)-1),2)) %>%
replace(is.na(.), 0)
ggplot(btcprice, aes(date, price)) +
geom_line() +
ylab("USD Price") +
xlab("Date") +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
theme(plot.background = element_rect(fill = "#A6A6A6"),
panel.background = element_rect(fill = "#A6A6A6"),
panel.grid.major = element_line(colour = "#7A7A7A")) +
labs(title = "Bitcoin's average yearly USD price",
subtitle = "Source: https://www.coingecko.com/")
runApp('BTCapp')
runApp('BTCapp')
# Creating plot
btcprice_plot <- ggplot(btcprice, aes(date, price)) +
geom_line() +
ylab("USD Price") +
xlab("Date") +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
theme(plot.background = element_rect(fill = "#A6A6A6"),
panel.background = element_rect(fill = "#A6A6A6"),
panel.grid.major = element_line(colour = "#7A7A7A"))
View(btcprice_plot)
btcprice %>%
ggplot(aes(date, price)) +
geom_line() +
ylab("USD Price") +
xlab("Date") +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
theme(plot.background = element_rect(fill = "#A6A6A6"),
panel.background = element_rect(fill = "#A6A6A6"),
panel.grid.major = element_line(colour = "#7A7A7A"))
# Creating plot
btcprice_plot <- btcprice %>%
ggplot(aes(date, price)) +
geom_line() +
ylab("USD Price") +
xlab("Date") +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
theme(plot.background = element_rect(fill = "#A6A6A6"),
panel.background = element_rect(fill = "#A6A6A6"),
panel.grid.major = element_line(colour = "#7A7A7A"))
btcprice_plot
btcprice_plot
runApp('BTCapp')
