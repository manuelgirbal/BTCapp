# Loop through each country
for (country in all_countries) {
# Geocode the country name to obtain latitude and longitude
geo <- geocode(country)
# Create a data frame row with country name, latitude, and longitude
country_row <- data.frame(
Country = country,
Latitude = geo$lat,
Longitude = geo$lon
)
# Append the country data to the main data frame
country_data <- rbind(country_data, country_row)
}
# Print the resulting dataset
print(country_data)
# Get a complete list of country names
all_countries <- countrycode::codelist$country.name
# Get a complete list of country names
all_countries <- countrycode::codelist$country.name
library(tidyverse)
library(readr)
library(ggmap)
library(countrycode)
nodes_df <- read.csv("R/nodes.csv")
nodes_df <- read.csv("BTCapp/R/nodes.csv")
View(nodes_df)
?countrycode
codelist
head(codelist)
vars(codelist)
names(codelist)
# Get a complete list of country names
all_countries <- countrycode::codelist$country.name.de
all_countries
# Create an empty data frame to store country data
country_data <- data.frame()
for (country in all_countries) {
# Geocode the country name to obtain latitude and longitude
geo <- geocode(country)
}
# Create an empty data frame to store country data
country_data <- data.frame()
# Loop through each country
for (country in all_countries) {
# Geocode the country name to obtain latitude and longitude
geo <- geocode(country)
# Create a data frame row with country name, latitude, and longitude
country_row <- data.frame(
Country = country,
Latitude = geo$lat,
Longitude = geo$lon
)
# Append the country data to the main data frame
country_data <- rbind(country_data, country_row)
}
View(nodes_df)
nodes_df %>% filter(is.na(country_code)) %>% group_by(organization_name) %>% summarise(n = n())
library(maps)
# Creating map
world <- map_data("world")
View(world)
unique(world$region)
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = "white", color = "black")
names(nodes_df)
node_counts <- nodes_df %>%
group_by(country_code) %>%
count()
node_counts
View(node_counts)
node_colors <- scale_fill_gradient(
low = "white",
high = "orange",
breaks = c(1, 10, 100, 1000, 10000),
labels = c("1", "10", "100", "1000", "10000"),
name = "Number of nodes"
)
View(node_colors)
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = "white", color = "black")
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_polygon(data = world, aes(x = long, y = lat, group = group, fill = node_counts$n))
View(world)
View(world)
View(nodes_df)
?maps
?map_data
codelist$un.region.code
names(codelist)
open(codelist)
class(codelist)
view(codelist)
?left_join
left_join(nodes_df, codelist, join_by("country_code" == ecb))
test = left_join(nodes_df, codelist, join_by("country_code" == ecb))
nodes_df <- read.csv("BTCapp/R/nodes.csv")
library(tidyverse)
library(readr)
library(countrycode)
# Get a complete list of country names
all_countries <- countrycode::codelist$country.name.de
rm(all_countries)
codelist
names(codelist)
x ,.-Ã±{}
x <- codelist
View(x)
View(nodes_df)
?codelist
View(x)
View(nodes_df)
# Get country name:
country_name <- countrycode(sourcevar = nodes_df$country_code,
origin = ecb,
destination = country.name)
# Get country name:
country_name <- countrycode(sourcevar = nodes_df$country_code,
origin = 'ecb',
destination = 'country.name')
nodes_df <- cbind(nodes_df, country_name)
View(nodes_df)
library(maps)
# Creating a color scale based on the number of nodes
node_counts <- nodes_df %>%
group_by(country_name) %>%
count()
View(node_counts)
node_colors <- scale_fill_gradient(
low = "white",
high = "orange",
breaks = c(1, 10, 100, 1000, 10000),
labels = c("1", "10", "100", "1000", "10000"),
name = "Number of nodes"
)
# Creating map
world <- map_data("world")
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_polygon(data = world, aes(x = long, y = lat, group = group, fill = node_counts$n)) +
node_colors +
xlab("Longitude") +
ylab("Latitude") +
theme(plot.background = element_rect(fill = "#A6A6A6"),
panel.background = element_rect(fill = "#A6A6A6"),
panel.grid.major = element_line(colour = "#7A7A7A")
)
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = "white", color = "black")
# Creating a color scale based on the number of nodes
node_counts <- nodes_df %>%
group_by(country_name) %>%
!is.na(count())
# Creating a color scale based on the number of nodes
node_counts <- nodes_df %>%
filter(!is.na()) %>%
group_by(country_name) %>%
count()
# Creating a color scale based on the number of nodes
node_counts <- nodes_df %>%
filter(!is.na(.)) %>%
group_by(country_name) %>%
count()
View(nodes_df)
# Creating a color scale based on the number of nodes
node_counts <- nodes_df %>%
filter(!is.na(country_name)) %>%
group_by(country_name) %>%
count()
View(node_counts)
node_colors <- scale_fill_gradient(
low = "white",
high = "orange",
breaks = c(1, 10, 100, 1000, 10000),
labels = c("1", "10", "100", "1000", "10000"),
name = "Number of nodes"
)
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_polygon(data = world, aes(x = long, y = lat, group = group, fill = node_counts$n))
world
head(world)
summary(world)
as_tibble(world)
?maps
?world
as_tibble(world)
unique(world$region)
?map_data
?left_join
world2 <- world %>%
left_join(node_counts, join_by(region == country_name))
View(world2)
world2 %>%
ggplot()
world %>% ggplot()
# Plotting the map
world2 %>%
ggplot() +
geom_sf(aes(fill = n)) +
scale_fill_gradient2(low = "white", mid = "grey", high = "orange")
library(sf)
# Plotting the map
world2 %>%
ggplot() +
geom_sf(aes(fill = n)) +
scale_fill_gradient2(low = "white", mid = "grey", high = "orange")
?ne_countries
# Plotting the map
world2 %>%
ggplot() +
geom_sf(aes(fill = n)) +
scale_fill_gradient2(low = "white", mid = "grey", high = "orange")
library(tidyverse)
library(readr)
library(countrycode)
library(maps)
library(sf)
nodes_df <- read.csv("BTCapp/R/nodes.csv")
View(nodes_df)
# Get country name:
country_name <- countrycode(sourcevar = nodes_df$country_code,
origin = 'ecb',
destination = 'country.name')
nodes_df <- cbind(nodes_df, countrycode(sourcevar = nodes_df$country_code,
origin = 'ecb',
destination = 'country.name'))
rm(country_name)
View(nodes_df)
# Get country name:
country_name <- countrycode(sourcevar = nodes_df$country_code,
origin = 'ecb',
destination = 'country.name')
nodes_df <- cbind(nodes_df, country_name)
nodes_df <- read.csv("BTCapp/R/nodes.csv")
nodes_df <- cbind(nodes_df, country_name)
View(nodes_df)
# Creating a nodes count and joining with world dataframe
node_counts <- nodes_df %>%
filter(!is.na(country_name)) %>%
group_by(country_name) %>%
count()
View(node_counts)
# Creating a nodes count and joining with world dataframe
node_counts <- nodes_df %>%
filter(!is.na(country_name)) %>%
group_by(country_name) %>%
count() %>%
arrange(desc())
# Creating a nodes count and joining with world dataframe
node_counts <- nodes_df %>%
filter(!is.na(country_name)) %>%
group_by(country_name) %>%
count() %>%
arrange(desc(n))
View(node_counts)
?ne_countries
library(rnaturalearth)
View(node_counts)
# Creating a nodes count and joining with world dataframe
node_counts <- nodes_df %>%
filter(!is.na(country_name)) %>%
group_by(country_name, country_code) %>%
count() %>%
arrange(desc(n))
View(node_counts)
world_nodes <- ne_countries(scale = "medium", returnclass = "sf") %>%
mutate(country_code = adm0_a3) %>%
left_join(node_counts, by = "country_code")
library(rnaturalearthdata)
world_nodes <- ne_countries(scale = "medium", returnclass = "sf") %>%
mutate(country_code = adm0_a3) %>%
left_join(node_counts, by = "country_code")
View(world_nodes)
View(world_nodes)
world_nodes$n
world_nodes
world_nodes <- ne_countries(scale = "medium", returnclass = "sf") %>%
mutate(country_code = adm0_a3) %>%
left_join(node_counts, by = "country_code") %>%
filter(!is.na(country_code)) %>%
as_tibble()
world_nodes
View(world_nodes)
world_nodes <- ne_countries(scale = "medium", returnclass = "sf") %>%
mutate(country_code = adm0_a3) %>%
left_join(node_counts, by = "country_code") %>%
filter(!is.na(n)) %>%
as_tibble()
View(nodes_df)
View(node_counts)
View(world_nodes)
world_nodes <- ne_countries(scale = "medium", returnclass = "sf")
View(world_nodes)
world_nodes <- ne_countries(scale = "medium", returnclass = "sf") %>%
mutate(country_code = adm0_a2) %>%
left_join(node_counts, by = "country_code") %>%
filter(!is.na(n)) %>%
as_tibble()
world_nodes <- ne_countries(scale = "medium", returnclass = "sf") %>%
mutate(country_code = iso_a2) %>%
left_join(node_counts, by = "country_code") %>%
filter(!is.na(n)) %>%
as_tibble()
View(world_nodes)
world_nodes$n
theme_set(theme_bw())
world_nodes %>%
ggplot() +
geom_sf(aes(fill = n)) +
scale_fill_gradient2(low = "white", mid = "grey", high = "orange")
library(sf)
world_nodes %>%
ggplot() +
geom_sf(aes(fill = n)) +
scale_fill_gradient2(low = "white", mid = "grey", high = "orange")
rlang::last_trace()
world nodes
world_nodes
class(WorldPhones$n)
class(world_nodes$n)
world_nodes %>%
ggplot() +
geom_sf(aes(fill = n))
?geom_sf
View(world_nodes)
?sf
world_nodes <- ne_countries(scale = "medium", returnclass = "sf") %>%
mutate(country_code = iso_a2) %>%
left_join(node_counts, by = "country_code") %>%
filter(!is.na(n))
world_nodes %>%
ggplot() +
geom_sf(aes(fill = n)) +
scale_fill_gradient2(low = "white", mid = "grey", high = "orange")
theme_set(theme_bw())
world_nodes %>%
ggplot() +
geom_sf(aes(fill = n)) +
scale_fill_gradient2(low = "white", mid = "grey", high = "orange")
View(node_counts)
world_nodes %>%
filter(country_code == c(US, DE))
world_nodes %>%
filter(country_code == c('US', 'DE'))
world_nodes %>%
filter(!country_code == c('US', 'DE'))
world_nodes %>%
filter(!country_code == c('US', 'DE')) %>%
ggplot() +
geom_sf(aes(fill = n)) +
scale_fill_gradient2(low = "white", mid = "grey", high = "orange")
world_nodes <- ne_countries(scale = "medium", returnclass = "sf") %>%
mutate(country_code = iso_a2) %>%
left_join(node_counts, by = "country_code") %>%
replace(is.na(n) = 0)
world_nodes <- ne_countries(scale = "medium", returnclass = "sf") %>%
mutate(country_code = iso_a2) %>%
left_join(node_counts, by = "country_code") %>%
replace(is.na(n), 0)
theme_set(theme_bw())
world_nodes %>%
filter(!country_code == c('US', 'DE')) %>%
ggplot() +
geom_sf(aes(fill = n)) +
scale_fill_gradient2(low = "white", mid = "grey", high = "orange")
world_nodes %>%
ggplot() +
geom_sf(aes(fill = n)) +
scale_fill_gradient2(low = "white", mid = "grey", high = "orange")
world_nodes %>%
ggplot() +
geom_sf(aes(fill = n)) +
scale_fill_gradient2(low = "white", mid = "lightgrey", high = "darkorange", midpoint = 0)
world_nodes %>%
ggplot() +
geom_sf(aes(fill = n)) +
scale_fill_gradient2(low = "lightgrey", mid = "orange", high = "darkorange", midpoint = 0)
world_nodes %>%
ggplot() +
geom_sf(aes(fill = n)) +
scale_fill_gradient2(low = "white", mid = "lightgrey", high = "darkorange", midpoint = 0)
View(world_nodes)
world_nodes %>%
filter(!sovereignt == 'Antartica') %>%
ggplot() +
geom_sf(aes(fill = n)) +
scale_fill_gradient2(low = "white", mid = "lightgrey", high = "darkorange", midpoint = 0)
world_nodes %>%
filter(!sovereignt == 'Argentina') %>%
ggplot() +
geom_sf(aes(fill = n)) +
scale_fill_gradient2(low = "white", mid = "lightgrey", high = "darkorange", midpoint = 0)
world_nodes %>%
filter(!sovereignt == 'Antartica') %>%
ggplot() +
geom_sf(aes(fill = n)) +
scale_fill_gradient2(low = "white", mid = "lightgrey", high = "darkorange", midpoint = 0)
world_nodes %>%
ggplot() +
geom_sf(aes(fill = n)) +
scale_fill_gradient2(low = "white", mid = "lightgrey", high = "darkorange")
world_nodes %>%
ggplot() +
geom_sf(aes(fill = n)) +
scale_fill_gradient2(low = "white", mid = "lightgrey", high = "darkorange", na.value = "white")
# Creating a nodes count and joining with world dataframe
node_counts <- nodes_df %>%
filter(!is.na(country_name)) %>%
group_by(country_name, country_code) %>%
summarise(nodes = n())
View(node_counts)
world_nodes <- ne_countries(scale = "medium", returnclass = "sf") %>%
mutate(country_code = iso_a2) %>%
left_join(node_counts, by = "country_code") %>%
replace(is.na(nodes), 0)
# Creating a nodes count and joining with world dataframe
node_counts <- nodes_df %>%
filter(!is.na(country_name)) %>%
group_by(country_name, country_code) %>%
summarise(nodes = n())
View(node_counts)
ne_countries(scale = "medium", returnclass = "sf") %>%
mutate(country_code = iso_a2) %>%
left_join(node_counts, by = "country_code")
ne_countries(scale = "medium", returnclass = "sf") %>%
mutate(country_code = iso_a2) %>%
left_join(node_counts, by = "country_code") %>%
replace(is.na(nodes), 0)
ne_countries(scale = "medium", returnclass = "sf") %>%
mutate(country_code = iso_a2) %>%
left_join(node_counts, by = "country_code") %>%
replace(is.na(n), 0)
world_nodes <- ne_countries(scale = "medium", returnclass = "sf") %>%
mutate(country_code = iso_a2) %>%
left_join(node_counts, by = "country_code") %>%
replace(is.na(n), 0)
nodes_df <- read.csv("BTCapp/R/nodes.csv")
# Get country name
country_name <- countrycode(sourcevar = nodes_df$country_code,
origin = 'ecb',
destination = 'country.name')
nodes_df <- cbind(nodes_df, country_name)
# Creating a nodes count and joining with world dataframe
node_counts <- nodes_df %>%
filter(!is.na(country_name)) %>%
group_by(country_name, country_code) %>%
summarise(nodes = n())
View(node_counts)
world_nodes <- ne_countries(scale = "medium", returnclass = "sf") %>%
mutate(country_code = iso_a2) %>%
left_join(node_counts, by = "country_code") %>%
replace(is.na(n), 0)
rm(world_nodes)
world_nodes <- ne_countries(scale = "medium", returnclass = "sf") %>%
mutate(country_code = iso_a2) %>%
left_join(node_counts, by = "country_code")
world_nodes$n
world_nodes$nodes
replace(is.na(world_nodes$n), 0)
world_nodes <- ne_countries(scale = "medium", returnclass = "sf") %>%
mutate(country_code = iso_a2) %>%
left_join(node_counts, by = "country_code") %>%
replace(is.na(.$nodes), 0)
world_nodes <- ne_countries(scale = "medium", returnclass = "sf") %>%
mutate(country_code = iso_a2) %>%
left_join(node_counts, by = "country_code") %>%
replace(is.na(nodes), 0)
world_nodes <- ne_countries(scale = "medium", returnclass = "sf") %>%
mutate(country_code = iso_a2) %>%
left_join(node_counts, by = "country_code") %>%
replace(is.na(world_nodes$nodes), 0)
world_nodes <- ne_countries(scale = "medium", returnclass = "sf") %>%
mutate(country_code = iso_a2) %>%
left_join(node_counts, by = "country_code")
world_nodes[is.na(world_nodes$nodes)] <- 0
world_nodes[, is.na(world_nodes$nodes)] <- 0
world_nodes$nodes
world_nodes[is.na(world_nodes)]
world_nodes <- ne_countries(scale = "medium", returnclass = "sf") %>%
mutate(country_code = iso_a2) %>%
left_join(node_counts, by = "country_code")
world_nodes[is.na(world_nodes)] <- 0
world_nodes %>%
ggplot() +
geom_sf(aes(fill = nodes)) +
scale_fill_gradient2(low = "white", mid = "lightgrey", high = "darkorange", na.value = "white")
world_nodes <- ne_countries(scale = "medium", returnclass = "sf") %>%
mutate(country_code = iso_a2) %>%
left_join(node_counts, by = "country_code")
world_nodes %>%
ggplot() +
geom_sf(aes(fill = nodes)) +
scale_fill_gradient2(low = "white", mid = "lightgrey", high = "darkorange", na.value = "white")
world_nodes %>%
ggplot() +
geom_sf(aes(fill = nodes)) +
scale_fill_gradient2(low = "white", mid = "lightgrey", high = "darkorange", na.value = "white") %>%
theme_minimal()
world_nodes %>%
ggplot() +
geom_sf(aes(fill = nodes)) +
scale_fill_gradient2(low = "white", mid = "lightgrey", high = "darkorange", na.value = "white") +
theme_minimal()
world_nodes %>%
ggplot() +
geom_sf(aes(fill = nodes)) +
scale_fill_gradient2(low = "white", mid = "lightgrey", high = "darkorange", na.value = "white") +
theme(plot.background = element_rect(fill = "#A6A6A6"),
panel.background = element_rect(fill = "#A6A6A6"),
panel.grid.major = element_line(colour = "#7A7A7A")
)
